<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="{{ url_for('static', filename='matrix_styles.css') }}">
    <title>Matrična Algebra</title>
    
</head>
<body>
    <h1>Matrična Algebra</h1>
    <div class="matrix-container">
        <div>
            <h3>Matrica A:</h3>
            <textarea id="matrixA" placeholder="Unesite matricu A:

     -2 2 -3
      1 1 -3
      2 0 -6"></textarea>
        </div>
        <div>
            <h3>Matrica B:</h3>
            <textarea id="matrixB" placeholder="Unesite matricu B:

      1 3 -5
      2 4 6
     -1 2 3"></textarea>
        </div>
    </div>
    <div class="button-container">
        <div class="row">

            <button onclick="determinant()">Determinanta A</button>
            <button onclick="transpose()">Transponirano A</button>
            <button onclick="determinantMatrixB()">Determinanta B</button> 
            <button onclick="transposeB()">Transponirano B</button>
        </div>

        <div class="row">
            <button onclick="addMatrices()">Zbroji Matrice</button>
            <button onclick="subtractMatrices()">Oduzmi Matrice</button>
            <button onclick="multiplyMatrices()">Pomnoži Matrice</button>
        </div>
    </div>
    <h3>Rezultat:</h3>
    <div id="result">Rezultat će se pojaviti ovdje.</div>

    <script>
        // Funkcija za dohvaćanje matrice
        function getMatrix(id) {
            const value = document.getElementById(id).value.trim();
            try {

                const rows = value.split("\n").map(row =>
                    row.trim().split(/\s+/).map(cell => {
                        if (cell.includes("/")) {

                            const [numerator, denominator] = cell.split("/").map(Number);
                            if (isNaN(numerator) || isNaN(denominator)) throw new Error();
                            return numerator / denominator;
                        }
                        const num = Number(cell);
                        if (isNaN(num)) throw new Error();
                        return num;
                    })
                );

                const numCols = rows[0].length;
                if (!rows.every(row => row.length === numCols)) {
                    throw new Error("Svi redovi moraju imati isti broj elemenata.");
                }

                return rows;
            } catch (e) {
                alert("Nevažeći format matrice. Provjerite jesu li redovi odvojeni novim linijama, a brojevi razmacima.");
                throw e;
            }
        }

        function displayResult(data) {
            const resultElement = document.getElementById("result");

            if (Array.isArray(data)) {

                const formattedMatrix = data
                    .map(row => row.map(num => num.toFixed(2)).join("  "))
                    .join("\n");
                resultElement.textContent = formattedMatrix;
            } else {
                resultElement.textContent = data;
            }
        }


        function displayMatrix(matrix) {
            if (!Array.isArray(matrix) || !Array.isArray(matrix[0])) {
                document.getElementById("result").textContent = "Nevažeći format matrice.";
                return;
            }

            const formattedMatrix = matrix
                .map(row => row.map(num => num.toFixed(2)).join("  ")) 
                .join("<br>"); 

            document.getElementById("result").innerHTML = formattedMatrix;
            }


        function transpose() {
            const matrix = getMatrix("matrixA");
            console.log("Sending matrix:", matrix);
            fetch("/transpose", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ matrix })
            })
            .then(response => response.json())
            .then(data => {
                if (Array.isArray(data.result)) {
                    displayMatrix(data.result);
                } else {
                    document.getElementById("result").textContent = data.error || "Unknown error.";
                }
            });
        }


        function determinant() {
            const matrix = getMatrix("matrixA");
            fetch("/determinant", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ matrix })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.result !== undefined) {
                        document.getElementById("result").textContent = `Determinanta A: ${data.result}`;
                    } else {
                        document.getElementById("result").textContent = "No result.";
                    }
                });
        }



        function transposeB() {
            const matrix = getMatrix("matrixB");
            fetch("/transpose", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ matrix })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.result) {
                        displayMatrix(data.result);
                    } else {
                        document.getElementById("result").textContent = data.error || "Unknown error.";
                    }
                })
                .catch(error => {
                    document.getElementById("result").textContent = `Error: ${error.message}`;
                });
        }

        function determinantMatrixB() {
            const matrix = getMatrix("matrixB");
            fetch("/determinant", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ matrix })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.result !== undefined) {
                        document.getElementById("result").textContent = `Determinanta B: ${data.result}`;
                    } else {
                        document.getElementById("result").textContent = "No result.";
                    }
                });
        }


        function addMatrices() {
            const matrix1 = getMatrix("matrixA");
            const matrix2 = getMatrix("matrixB");
            console.log("Matrix A:", matrix1);
            console.log("Matrix B:", matrix2);
            fetch("/add_matrices", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ matrix1, matrix2 })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.result) {
                        displayMatrix(data.result);
                    } else {
                        document.getElementById("result").textContent = data.error || "Unknown error.";
                    }
                });
        }


        function subtractMatrices() {
            const matrix1 = getMatrix("matrixA");
            const matrix2 = getMatrix("matrixB");
            fetch("/subtract_matrices", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ matrix1, matrix2 })
            })
            .then(response => response.json())
            .then(data => {
                if (data.result) {
                    displayMatrix(data.result);
                } else {
                    document.getElementById("result").textContent = data.error || "Unknown error.";
                }
            });
        }


        function multiplyMatrices() {
            const matrix1 = getMatrix("matrixA");
            const matrix2 = getMatrix("matrixB");
            console.log("Matrix A:", matrix1);
            console.log("Matrix B:", matrix2);
            fetch("/multiply", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ matrix1, matrix2 })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.result) {
                        displayMatrix(data.result);
                    } else {
                        document.getElementById("result").textContent = data.error || "Unknown error.";
                    }
                });
        }
    </script>
</body>
</html>
